% Rationale and Benefits
% John M. Gabriele
% 2011-11-03

It can be difficult to find good documentation. Some reasons for this
might include:

  * the developer is busy with other things and hasn't yet made time
    to create or improve the docs

  * the developer doesn't like or isn't familiar with the available
    doc formats and/or tools

  * users were not helping improve the docs and the developer lost
    interest in doing it all him/herself

  * the developer may not be very adept at writing docs, instead
    preferring to write more code instead

  * writing a full manual is a large task and takes a lot of
    motivation to get started

  * Writing good docs is difficult.

But without good docs you won't tend to have many (happy) users. And
without users you tend to lose motivation to work on your software. It
becomes a vicious cycle.

Gouda aims to remedy the situation.

Here's how Gouda can help create good docs for your project:

 1. Simplicity. You just create a `docs` directory, write your docs as
    simple text files, then run the script. There's *zero*
    configuration (unless you'd like to re-order how your docs appear
    in the autogenerated table of contents). You don't have to spend
    your time reading a manual or learning how to configure anything
    --- just run the script and you're done.

 2. Your docs are formatted in Markdown (with some Pandoc
    enhancements). Pretty much everyone already knows Markdown.
    There's almost no learning curve. Users will not have to learn any
    new markup formats or complicated tools to contribute to your
    docs.

    Another benefit of using Markdown is that it looks great as plain
    text in your editor. Easy to write, easy to read, easy syntax to
    remember.

 3. Gouda encourages you to modularize your docs into bite-sized files
    (one file per "chapter"). This helps lower the procrastination
    barrier; you can start small. Write a small index.txt and maybe an
    overview.txt and an examples.txt file, run gouda.py, and
    immediately get some results that you can make available.

    This also greatly lowers the barrier for potential contributors.
    A collaborator can send you a simple text file which could simply
    be dropped into your docs directory to automatically become a new
    chapter in your docs.

 4. All of your doc pages have their source readily available by just
    clicking the link in the footer (try it on this page). This makes
    it easy for collaborators to send you changes or diffs.

 5. It's fairly easy to get your documentation started. If you don't
    know where to start, here's some ideas:

      * copy your plain text README into your docs dir, rename it
        `index.txt`, and just tighten up the formatting (it's probably
        already pretty close to being Markdown-formatted).

      * Move your project's `NEWS` file into the docs directory.
        Rename it to news.txt and adjust the formatting to Markdown.

      * Write up some examples and put them into an `examples.txt` or
        `cookbook.txt` file. You can get syntax highlighting using
        delimited blocks as shown in the [quick markdown
        example](quick-markdown-example.html).

      * Another way to start is to just go into your docs directory
        and create a few files that come to mind which you think you
        can start to sketch out (for example, maybe a short
        `overview.txt` or `quick-ref.txt` doc).

 6. Making the docs available online is easy. Just rsync/ftp/scp the
    files (or the whole docs directory) to your webserver. Some module
    repositories (like Python's
    [Cheeseshop](http://cheeseshop.python.org)) will host plain html
    files like this for you.

 7. Using Gouda doesn't actually tie you to any one particular
    documentation tool. It's just a simple script that happens to use
    Pandoc for its Markdown implementation (see the [faq](faq.html)
    for reasons why I chose to use Pandoc).
